package game;

import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import java.util.*;

/*
This is the playing field game state
*/

public class GameState extends GameStateTemplate{

    private Player playerOne, playerTwo;
    private Random rand = new Random();
    public static ArrayList<Bomb> bombList;
    private BufferedImage unbreakableSprite, breakableSprite, bombSprite, initialSprite, verticalSprite, horizontalSprite, BombUpSprite,  bombKickSprite, fireSprite, lineBombSprite, powerBombSprite,  skateSprite;
    public static Tile [][] grid = new Tile[16][16]; //1 = nothing, 2 = breakable, 4 = unbreakable
    public static int winner = 0;
    Color background = new Color((float)0.207, (float)0.439, (float)0.2);

    public GameState(GameStateManager gsm){
        super(gsm);
    }

    public void init(){
        winner = 0;
        playerOne = new Player(80, 920, 1);
        playerTwo = new Player(920, 80, 2);
        bombList = new ArrayList<>();
        try{
            initialSprite = ImageIO.read(new File("assets/initial.png"));
            verticalSprite = ImageIO.read(new File("assets/vertical.png"));
            horizontalSprite = ImageIO.read(new File("assets/horizontal.png"));
            bombSprite = ImageIO.read(new File("assets/bomb.png"));
            unbreakableSprite = ImageIO.read(new File("assets/unbreakable.png"));
            breakableSprite = ImageIO.read(new File("assets/breakable.png"));
            BombUpSprite = ImageIO.read(new File("assets/BombUp.png"));
            bombKickSprite = ImageIO.read(new File("assets/bombKick.png"));
            fireSprite = ImageIO.read(new File("assets/fire.png"));
            lineBombSprite = ImageIO.read(new File("assets/lineBomb.png"));
            powerBombSprite = ImageIO.read(new File("assets/powerBomb.png"));
            skateSprite = ImageIO.read(new File("assets/skate.png"));

        }
        catch(IOException e){

        }
        grid = new Tile[16][16];
        for (int i = 1; i <=15; i++){
            for (int j = 1; j <=15; j++){
                if (i == 1||j == 1||i == 15||j == 15||(i%2 == 1 && j%2 == 1)){
                    grid[i][j]= new Tile(4);
                }
                else{
                    int n = (int)Math.ceil(Math.random()*5);
                    grid[i][j]= new Tile(n==1?1:2);
                }
            }
        }
        grid[14][2]= new Tile(1);
        grid[13][2]= new Tile(1);
        grid[14][3]= new Tile(1);
        grid[2][14]= new Tile(1);
        grid[2][13]= new Tile(1);
        grid[3][14]= new Tile(1);
            for (int i = 1; i<= 15; i++){
            for (int j = 1; j<=15; j++){
                System.out.print(grid[i][j].type+" ");
            }
            System.out.println();
        }
    }

    public void tick(){
        playerOne.tick();
        playerTwo.tick();

        for(int i = 1; i <= 15; i++){
            for(int j = 1; j <= 15; j++){
                grid[i][j].occupied = false;
                if(grid[i][j].isFire && (System.nanoTime() - grid[i][j].FireStartTime) / 1000000 >= 500){
                    grid[i][j].isFire = false;
                    grid[i][j].initial = false;
                    grid[i][j].horizontal = false;
                    grid[i][j].vertical = false;
                }
            }
        }

        for(int i = 0; i < bombList.size(); i++){
            bombList.get(i).tick();
            if((System.nanoTime() - bombList.get(i).BombStartTime) / 1000000 >= bombList.get(i).fuseLength){
                int r = bombList.get(i).bombRadius, x = bombList.get(i).y / 70 + 1, y = bombList.get(i).x / 70 + 1;
                if(bombList.get(i).whoPlaced == 1) playerOne.bombCount++;
                if(bombList.get(i).whoPlaced == 2) playerTwo.bombCount++;
                bombList.get(i).playSound();
                bombList.remove(i);
                initialBlast(r, x, y);
            }
        }

        if(winner != 0) gameOver(winner);
    }

    public void draw(Graphics g){
        g.setColor(background);
        g.fillRect(0, 0, 1050, 1050);

        //g.setColor(Color.WHITE);
        //for (int i = 0; i<15; i++) g.drawLine(i*50, 0, i*50, 650);
        //for (int i = 0; i<13; i++) g.drawLine(0, i*50, 750, i*50);
        //need to swap x and y  for grid to graphics
        for (int i = 1; i<=15; i++){
            for  (int j = 1; j<=15; j++){
                if(grid[i][j].type==4){
                    g.drawImage(unbreakableSprite, (j-1)*GameWindow.tileSize, (i-1)*GameWindow.tileSize, null);
                }
                else if (grid[i][j].type==2){
                    g.drawImage(breakableSprite, (j-1)*GameWindow.tileSize, (i-1)*GameWindow.tileSize, null);
                }
                if(grid[i][j].initial){
                    g.drawImage(initialSprite, (j-1)*GameWindow.tileSize, (i-1)*GameWindow.tileSize, null);
                }
                else if(grid[i][j].vertical){
                    g.drawImage(verticalSprite, (j-1)*GameWindow.tileSize, (i-1)*GameWindow.tileSize, null);
                }
                else if(grid[i][j].horizontal){
                    g.drawImage(horizontalSprite, (j-1)*GameWindow.tileSize, (i-1)*GameWindow.tileSize, null);
                }
                if(grid[i][j].powerup == 1){
                    g.drawImage(fireSprite, (j-1)*GameWindow.tileSize, (i-1)*GameWindow.tileSize, null);
                }
                if(grid[i][j].powerup == 2){
                    g.drawImage(BombUpSprite, (j-1)*GameWindow.tileSize, (i-1)*GameWindow.tileSize, null);
                }
                if(grid[i][j].powerup == 3){
                    g.drawImage(skateSprite, (j-1)*GameWindow.tileSize, (i-1)*GameWindow.tileSize, null);
                }
                if(grid[i][j].powerup == 4){
                    g.drawImage(powerBombSprite, (j-1)*GameWindow.tileSize, (i-1)*GameWindow.tileSize, null);
                }
                if(grid[i][j].powerup == 5){
                    g.drawImage(bombKickSprite, (j-1)*GameWindow.tileSize, (i-1)*GameWindow.tileSize, null);
                }
                if(grid[i][j].powerup == 7){
                    g.drawImage(lineBombSprite, (j-1)*GameWindow.tileSize, (i-1)*GameWindow.tileSize, null);
                }
            }
        }
        playerOne.draw(g);
        playerTwo.draw(g);
        for(int i = 0; i < bombList.size(); i++){
            bombList.get(i).draw(g);
        }
    }
    public static boolean check (int x, int y){
        //need to swap x and y for graphics to grid
        x=x^y;
        y=y^x;
        x=x^y;
        int x1 = x/GameWindow.tileSize, y1 = y/GameWindow.tileSize, x2 = (x+50)/GameWindow.tileSize, y2 = (y+50)/GameWindow.tileSize;
        x1++; y1++; x2++; y2++;
        //y1++; y2++;
        //System.out.println(x+" "+y+" "+x1+" "+y1+" "+x2+" "+y2);
        //System.out.println(x+" "+y+" "+x1+" "+y1+" "+x2+" "+y2+" "+grid[x1][y1]+" "+grid[x2][y2]);
        int t = 1;
        t*=grid[x1][y1].type;
        t*=grid[x1][y2].type;
        t*=grid[x2][y1].type;
        t*=grid[x2][y2].type;
        return t%2==1;
    }
    public void keyPressed(int k){
        playerOne.keyPressed(k);
        playerTwo.keyPressed(k);
        if(k == KeyEvent.VK_P) gsm.states.push(new PauseState(gsm));
    }

    public void keyReleased(int k) {
        playerOne.keyReleased(k);
        playerTwo.keyReleased(k);
    }

    private void initialBlast(int radius, int x, int y){
        grid[x][y].startFire();
        grid[x][y].initial = true; //Purely for the sprites
        for (int i = 0; i<bombList.size(); i++){
            if (bombList.get(i).y/70+1==x&&bombList.get(i).x/70+1== y){
                int r = bombList.get(i).bombRadius, x1 = bombList.get(i).y / 70 + 1, y1 = bombList.get(i).x / 70 + 1;
                if(bombList.get(i).whoPlaced == 1) playerOne.bombCount++;
                if(bombList.get(i).whoPlaced == 2) playerTwo.bombCount++;
                bombList.get(i).playSound();
                bombList.remove(i);
                initialBlast(r, x1, y1);
            }
        }
        blastUp(radius - 1, x - 1, y);
        blastDown(radius - 1, x + 1, y);
        blastLeft(radius - 1, x, y - 1);
        blastRight(radius - 1, x, y + 1);
    }

    private void blastUp(int distance, int x, int y){
        if(distance == 0 || grid[x][y].type == 4) return;
        for (int i = 0; i<bombList.size(); i++){
            if (bombList.get(i).y/70+1==x&&bombList.get(i).x/70+1== y){
                int r = bombList.get(i).bombRadius, x1 = bombList.get(i).y / 70 + 1, y1 = bombList.get(i).x / 70 + 1;
                if(bombList.get(i).whoPlaced == 1) playerOne.bombCount++;
                if(bombList.get(i).whoPlaced == 2) playerTwo.bombCount++;
                bombList.get(i).playSound();
                bombList.remove(i);
                initialBlast(r, x1, y1);
            }
        }
        if(grid[x][y].type == 2){
            grid[x][y].type = 1;
            if(rand.nextInt(100) <= 40) dropPower(grid[x][y]);
            return;
        }
        grid[x][y].startFire();
        grid[x][y].vertical = true; //Purely for the sprites
        blastUp(distance - 1, x - 1, y);
    }

    private void blastDown(int distance, int x, int y){
        if(distance == 0 || grid[x][y].type == 4) return;
        for (int i = 0; i<bombList.size(); i++){
            if (bombList.get(i).y/70+1==x&&bombList.get(i).x/70+1== y){
                int r = bombList.get(i).bombRadius, x1 = bombList.get(i).y / 70 + 1, y1 = bombList.get(i).x / 70 + 1;
                if(bombList.get(i).whoPlaced == 1) playerOne.bombCount++;
                if(bombList.get(i).whoPlaced == 2) playerTwo.bombCount++;
                bombList.get(i).playSound();
                bombList.remove(i);
                initialBlast(r, x1, y1);
            }
        }
        if(grid[x][y].type == 2){
            grid[x][y].type = 1;
            if(rand.nextInt(100) <= 40) dropPower(grid[x][y]);
            return;
        }
        grid[x][y].startFire();
        grid[x][y].vertical = true; //Purely for the sprites
        blastDown(distance - 1, x + 1, y);
    }

    private void blastLeft(int distance, int x, int y){
        if(distance == 0 || grid[x][y].type == 4) return;
        for (int i = 0; i<bombList.size(); i++){
            if (bombList.get(i).y/70+1==x&&bombList.get(i).x/70+1== y){
                int r = bombList.get(i).bombRadius, x1 = bombList.get(i).y / 70 + 1, y1 = bombList.get(i).x / 70 + 1;
                if(bombList.get(i).whoPlaced == 1) playerOne.bombCount++;
                if(bombList.get(i).whoPlaced == 2) playerTwo.bombCount++;
                bombList.get(i).playSound();
                bombList.remove(i);
                initialBlast(r, x1, y1);
            }
        }
        if(grid[x][y].type == 2){
            grid[x][y].type = 1;
            if(rand.nextInt(100) <= 40) dropPower(grid[x][y]);
            return;
        }
        grid[x][y].startFire();
        grid[x][y].horizontal = true; //Purely for the sprites
        blastLeft(distance - 1, x, y - 1);
    }

    private void blastRight(int distance, int x, int y){
        if(distance == 0 || grid[x][y].type == 4) return;
        for (int i = 0; i<bombList.size(); i++){
            if (bombList.get(i).y/70+1==x&&bombList.get(i).x/70+1== y){
                int r = bombList.get(i).bombRadius, x1 = bombList.get(i).y / 70 + 1, y1 = bombList.get(i).x / 70 + 1;
                if(bombList.get(i).whoPlaced == 1) playerOne.bombCount++;
                if(bombList.get(i).whoPlaced == 2) playerTwo.bombCount++;
                bombList.get(i).playSound();
                bombList.remove(i);
                initialBlast(r, x1, y1);
            }
        }
        if(grid[x][y].type == 2){
            grid[x][y].type = 1;
            if(rand.nextInt(100) <= 40) dropPower(grid[x][y]);
            return;
        }
        grid[x][y].startFire();
        grid[x][y].horizontal = true; //Purely for the sprites
        blastRight(distance - 1, x, y + 1);
    }

    private void gameOver(int winner){
        gsm.states.push(new GameOverState(gsm, winner));
    }

    private void dropPower(Tile t){
        int power = rand.nextInt(100);
        System.out.println(power);
        if(power <= 10) t.powerup = 1;
        else if(power <= 40) t.powerup = 2;
        else if(power <= 60) t.powerup = 3;
        else if(power <= 70) t.powerup = 4;
        else if(power <= 80) t.powerup = 5;
        else if(power <= 90) t.powerup = 6;
        else if(power <= 100) t.powerup = 7;
    }
}
