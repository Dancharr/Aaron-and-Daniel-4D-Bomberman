package game;

import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

public class Player{

    private boolean right, left, up, down;
    public int x, y, velocity = 6;
    public boolean canKick=true, powerBomb, line;
    private int size = 50, type;
    private BufferedImage sprite;
    public int bombRadius = 2, fuseLength = 2000; // milliseconds

    public int bombCount = 1;

    public Player(int x, int y, int t) {
        this.x = x;
        this.y = y;
        this.type = t;
        try {
            sprite = ImageIO.read(new File(t==1?"assets/player1.png":"assets/player2.png"));
        }
        catch(IOException e){}
    }

    public void tick(){
        if(right){
            moveRight(velocity);
        }
        if(left){
            moveLeft(velocity);
        }
        if(up){
            moveUp(velocity);
        }
        if(down){
            moveDown(velocity);
        }
        if(GameState.grid[(y + 25) / GameWindow.tileSize + 1][(x + 25) / GameWindow.tileSize + 1].isFire) GameState.winner = type==1?2:1;
        if(GameState.grid[(y + 25) / GameWindow.tileSize + 1][(x + 25) / GameWindow.tileSize + 1].powerup != 0){
            GameState.grid[(y + 25) / GameWindow.tileSize + 1][(x + 25) / GameWindow.tileSize + 1].power(this);
            GameState.grid[(y + 25) / GameWindow.tileSize + 1][(x + 25) / GameWindow.tileSize + 1].powerup = 0;
        }

    }
private void moveRight(int n){
        while(n-->0&&GameState.check(x+1, y)){
            x++;
            if (x/70==(x+50)/70)continue;
            if (!canKick) continue;
            int x1 = (x+50)/70+1;
            int y1 = (y+25)/70+1;
            for (int i = 0; i<GameState.bombList.size(); i++){
                if (GameState.bombList.get(i).x/70+1==x1&&GameState.bombList.get(i).y/70+1==y1) GameState.bombList.get(i).right=true;
            }
        }
    }
    private void moveLeft(int n){
        while(n-->0&&GameState.check(x-1, y)){
            x--;
            if (x/70==(x+50)/70)continue;
            if (!canKick) continue;
            int x1 = (x)/70+1;
            int y1 = (y+25)/70+1;
            for (int i = 0; i<GameState.bombList.size(); i++){
                if (GameState.bombList.get(i).x/70+1==x1&&GameState.bombList.get(i).y/70+1==y1) GameState.bombList.get(i).left=true;
            }
        }
    }
    private void moveUp(int n){
        while(n-->0&&GameState.check(x, y-1)){
            y--;
            if (y/70==(y+50)/70)continue;
            if (!canKick) continue;
            int x1 = (x+25)/70+1;
            int y1 = (y)/70+1;
            for (int i = 0; i<GameState.bombList.size(); i++){
                if (GameState.bombList.get(i).x/70+1==x1&&GameState.bombList.get(i).y/70+1==y1) GameState.bombList.get(i).up=true;
            }
        }
    }
    private void moveDown(int n){
        while(n-->0&&GameState.check(x, y+1)){
            y++;
            if (y/70==(y+50)/70)continue;
            if (!canKick) continue;
            int x1 = (x+25)/70+1;
            int y1 = (y+50)/70+1;
            for (int i = 0; i<GameState.bombList.size(); i++){
                if (GameState.bombList.get(i).x/70+1==x1&&GameState.bombList.get(i).y/70+1==y1) GameState.bombList.get(i).down=true;
            }
        }
    }

    public void draw(Graphics g){
        g.drawImage(sprite, x, y, null);
    }

    public void keyPressed(int k){
        if(k == KeyEvent.VK_D&&type==1) right = true;
        if(k == KeyEvent.VK_A&&type==1) left = true;
        if(k == KeyEvent.VK_W&&type==1) up = true;
        if(k == KeyEvent.VK_S&&type==1) down = true;
        if(k == KeyEvent.VK_Q&&type==1&&bombCount>0&&!GameState.grid[y / GameWindow.tileSize + 1][x / GameWindow.tileSize + 1].occupied){
            GameState.bombList.add(new Bomb(fuseLength, bombRadius, 1, ((x+25)/70)*70, ((y+25)/70)*70));
            bombCount--;
        }
        if(k == KeyEvent.VK_L&&type==2) right = true;
        if(k == KeyEvent.VK_J&&type==2) left = true;
        if(k == KeyEvent.VK_I&&type==2) up = true;
        if(k == KeyEvent.VK_K&&type==2) down = true;
        if(k == KeyEvent.VK_U&&type==2&&bombCount>0&&!GameState.grid[y / GameWindow.tileSize + 1][x / GameWindow.tileSize + 1].occupied){
            GameState.bombList.add(new Bomb(fuseLength, bombRadius, 2, ((x+25)/70)*70, ((y+25)/70)*70));
            bombCount--;
        }
    }

    public void keyReleased(int k){
        if(k == KeyEvent.VK_D&&type==1) right = false;
        if(k == KeyEvent.VK_A&&type==1) left = false;
        if(k == KeyEvent.VK_W&&type==1) up = false;
        if(k == KeyEvent.VK_S&&type==1) down = false;
        if(k == KeyEvent.VK_L&&type==2) right = false;
        if(k == KeyEvent.VK_J&&type==2) left = false;
        if(k == KeyEvent.VK_I&&type==2) up = false;
        if(k == KeyEvent.VK_K&&type==2) down = false;
    }

}
