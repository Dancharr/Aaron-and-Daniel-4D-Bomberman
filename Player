package game;

import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import java.util.*;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

public class Player{
    private boolean right, left, up, down;
    public int x, y, speed = 4, powerBomb=0, lineBomb=2;
    private int startWalkingx, startWalkingy;
    public ArrayList<Integer> direction = new ArrayList<>(); // 1 = up, 2 = right, 3 = down, 4 = left
    public boolean canKick=true, canPierce;
    private int size = 50, type;
    public int bombRadius = 2, fuseLength = 2200; // milliseconds
    private BufferedImage up1, up2, up3, right1, right2, right3,
            down1, down2, down3, left1, left2, left3;
    public double movingStartTime;
    public int bombCount = 1;

    public Player(int x, int y, int t) {
        this.x = x;
        this.y = y;
        this.type = t;
        direction.add(this.type==1?1:3);
        try {
            up1 = ImageIO.read(new File(t==1?"assets/red_up1.png":"assets/blue_up1.png"));
            up2 = ImageIO.read(new File(t==1?"assets/red_up2.png":"assets/blue_up2.png"));
            up3 = ImageIO.read(new File(t==1?"assets/red_up3.png":"assets/blue_up3.png"));
            right1 = ImageIO.read(new File(t==1?"assets/red_right1.png":"assets/blue_right1.png"));
            right2 = ImageIO.read(new File(t==1?"assets/red_right2.png":"assets/blue_right2.png"));
            right3 = ImageIO.read(new File(t==1?"assets/red_right3.png":"assets/blue_right3.png"));
            down1 = ImageIO.read(new File(t==1?"assets/red_down1.png":"assets/blue_down1.png"));
            down2 = ImageIO.read(new File(t==1?"assets/red_down2.png":"assets/blue_down2.png"));
            down3 = ImageIO.read(new File(t==1?"assets/red_down3.png":"assets/blue_down3.png"));
            left1 = ImageIO.read(new File(t==1?"assets/red_left1.png":"assets/blue_left1.png"));
            left2 = ImageIO.read(new File(t==1?"assets/red_left2.png":"assets/blue_left2.png"));
            left3 = ImageIO.read(new File(t==1?"assets/red_left3.png":"assets/blue_left3.png"));
        }
        catch(IOException e){}
    }
    public void tick(){
        if(right){
            moveRight(speed);
        }
        if(left){
            moveLeft(speed);
        }
        if(up){
            moveUp(speed);
        }
        if(down){
            moveDown(speed);
        }
        if(!right && !left && !up && !down) movingStartTime = System.nanoTime();
        if(GameState.grid[(y + 25) / GameWindow.tileSize + 1][(x + 25) / GameWindow.tileSize + 1].isFire) GameState.winner = type==1?2:1;
        if(GameState.grid[(y + 25) / GameWindow.tileSize + 1][(x + 25) / GameWindow.tileSize + 1].powerup != 0){
            GameState.grid[(y + 25) / GameWindow.tileSize + 1][(x + 25) / GameWindow.tileSize + 1].power(this);
            GameState.grid[(y + 25) / GameWindow.tileSize + 1][(x + 25) / GameWindow.tileSize + 1].powerup = 0;
        }
    }
    private void lineBomb (int x1, int y1){
        System.out.println(x1+" "+y1);
        if (GameState.grid[x1][y1].type!=1) return;
        if (!GameState.grid[x1][y1].occupied){
            bombCount--;
            if (powerBomb>0) GameState.bombList.add(new Bomb(fuseLength, 15, type, (y1-1)*70, (x1-1)*70, canPierce));
            else GameState.bombList.add(new Bomb(fuseLength, bombRadius, type, (y1-1)*70, (x1-1)*70, canPierce));
        }
        if (direction.get(direction.size()-1)==1) lineBomb(x1-1, y1);
        if (direction.get(direction.size()-1)==2) lineBomb(x1, y1+1);
        if (direction.get(direction.size()-1)==3) lineBomb(x1+1, y1);
        if (direction.get(direction.size()-1)==4) lineBomb(x1, y1-1);
    }
    private static boolean intersects (int p1, int p2){
        return (Math.abs(p2-p1)<=50);
    }
    private void moveRight(int n){
        for (int i = 0; i<GameState.bombList.size(); i++){
            if (x+50==GameState.bombList.get(i).x&&intersects(y, GameState.bombList.get(i).y)){
                if (canKick) GameState.bombList.get(i).right=true;
                return;
            }
        }
        while(n-->0&&GameState.check(x+1, y)){
            x++;
            for (int i = 0; i<GameState.bombList.size(); i++){
                if (x+50==GameState.bombList.get(i).x&&intersects(y, GameState.bombList.get(i).y)){
                    if (canKick) GameState.bombList.get(i).right=true;
                    return;
                }
            }
        }
    }
    private void moveLeft(int n){
        for (int i = 0; i<GameState.bombList.size(); i++){
            if (x==GameState.bombList.get(i).x+50&&intersects(y, GameState.bombList.get(i).y)){
                if (canKick) GameState.bombList.get(i).left=true;
                return;
            }
        }
        while(n-->0&&GameState.check(x-1, y)){
            x--;
            for (int i = 0; i<GameState.bombList.size(); i++){
                if (x==GameState.bombList.get(i).x+50&&intersects(y, GameState.bombList.get(i).y)){
                    if (canKick) GameState.bombList.get(i).left=true;
                    return;
                }
            }
        }
    }
    private void moveUp(int n){
        for (int i = 0; i<GameState.bombList.size(); i++){
            if (y==GameState.bombList.get(i).y+50&&intersects(x, GameState.bombList.get(i).x)){
                if (canKick) GameState.bombList.get(i).up=true;
                return;
            }
        }
        while(n-->0&&GameState.check(x, y-1)){
            y--;
            for (int i = 0; i<GameState.bombList.size(); i++){
                if (y==GameState.bombList.get(i).y+50&&intersects(x, GameState.bombList.get(i).x)){
                    if (canKick) GameState.bombList.get(i).up=true;
                    return;
                }
            }

        }
    }
    private void moveDown(int n){
        for (int i = 0; i<GameState.bombList.size(); i++){
            if (y+50==GameState.bombList.get(i).y&&intersects(x, GameState.bombList.get(i).x)){
                if (canKick) GameState.bombList.get(i).down=true;
                return;
            }
        }
        while(n-->0&&GameState.check(x, y+1)){
            y++;
            for (int i = 0; i<GameState.bombList.size(); i++){
                if (y+50==GameState.bombList.get(i).y&&intersects(x, GameState.bombList.get(i).x)){
                    if (canKick) GameState.bombList.get(i).down=true;
                    return;
                }
            }
        }
    }

    public void draw(Graphics g){
        if(right || left || up || down){
            if(direction.get(direction.size()-1) == 1){
                if(Math.abs(startWalkingy - y) % 150 < 50 ) g.drawImage(up2, x, y - 35, null);
                else if(Math.abs(startWalkingy - y) % 150 < 100 ) g.drawImage(up3, x, y - 35, null);
                else if(Math.abs(startWalkingy - y) % 150 < 150 ) g.drawImage(up1, x, y - 35, null);
            }
            if(direction.get(direction.size()-1) == 2){
                if(Math.abs(startWalkingx - x) % 150 < 50 ) g.drawImage(right2, x, y - 35, null);
                else if(Math.abs(startWalkingx - x) % 150 < 100 ) g.drawImage(right3, x, y - 35, null);
                else if(Math.abs(startWalkingx - x) % 150 < 150 ) g.drawImage(right1, x, y - 35, null);
            }
            if(direction.get(direction.size()-1) == 3){
                if(Math.abs(startWalkingy - y) % 150 < 50 ) g.drawImage(down2, x, y - 35, null);
                else if(Math.abs(startWalkingy - y) % 150 < 100 ) g.drawImage(down3, x, y - 35, null);
                else if(Math.abs(startWalkingy - y) % 150 < 150 ) g.drawImage(down1, x, y - 35, null);
            }
            if(direction.get(direction.size()-1) == 4){
                if(Math.abs(startWalkingx - x) % 150 < 50 ) g.drawImage(left2, x, y - 35, null);
                else if(Math.abs(startWalkingx - x) % 150 < 100 ) g.drawImage(left3, x, y - 35, null);
                else if(Math.abs(startWalkingx - x) % 150 < 150 ) g.drawImage(left1, x, y - 35, null);
            }
        }
        else{
            if(direction.get(direction.size()-1) == 1) g.drawImage(up1, x, y - 35, null);
            if(direction.get(direction.size()-1) == 2)g.drawImage(right1, x, y - 35, null);
            if(direction.get(direction.size()-1) == 3)g.drawImage(down1, x, y - 35, null);
            if(direction.get(direction.size()-1) == 4)g.drawImage(left1, x, y - 35, null);
        }
    }

    public void keyPressed(int k){
        if(k == KeyEvent.VK_D&&type==1){
            if(right || left || up || down) {
                if (direction.indexOf(2) == -1){
                    direction.add(2);
                    startWalkingx = x;
                }
            }
            else direction.set(0, 2);
            right = true;
        }
        if(k == KeyEvent.VK_A&&type==1){
            if(right || left || up || down) {
                if (direction.indexOf(4) == -1){
                    direction.add(4);
                    startWalkingx = x;
                }
            }
            else direction.set(0, 4);
            left = true;
        }
        if(k == KeyEvent.VK_W&&type==1){
            if(right || left || up || down) {
                if (direction.indexOf(1) == -1){
                    direction.add(1);
                    startWalkingy = y;
                }
            }
            else direction.set(0, 1);
            up = true;
        }
        if(k == KeyEvent.VK_S&&type==1){
            if(right || left || up || down){
                if(direction.indexOf(3) == -1){
                    direction.add(3);
                    startWalkingy = y;
                }
            }
            else direction.set(0, 3);
            down = true;
        }
        if(k == KeyEvent.VK_Q&&type==1&&bombCount>0&&!GameState.grid[y / GameWindow.tileSize + 1][x / GameWindow.tileSize + 1].occupied){
            if(lineBomb>0){
                //if (direction.get(direction.size()-1)==1)lineBomb(y/GameWindow.tileSize+1, x/GameWindow.tileSize+1);
                //if (direction.get(direction.size()-1)==2)lineBomb(y/GameWindow.tileSize+1, x/GameWindow.tileSize+2);
                //if (direction.get(direction.size()-1)==3)lineBomb(y/GameWindow.tileSize+1, x/GameWindow.tileSize);
                //if (direction.get(direction.size()-1)==4)lineBomb(y/GameWindow.tileSize+2, x/GameWindow.tileSize+1);
                lineBomb(y/GameWindow.tileSize+1, x/GameWindow.tileSize+1);
                bombCount++;
                if (powerBomb>0) powerBomb--;
                lineBomb--;
            }
            else if(powerBomb>0){
                GameState.bombList.add(new Bomb(fuseLength, 15, 1, ((x+25)/70)*70, ((y+25)/70)*70, canPierce));
                powerBomb--;
            }
            else GameState.bombList.add(new Bomb(fuseLength, bombRadius, 1, ((x+25)/70)*70, ((y+25)/70)*70, canPierce));
            bombCount--;
        }
        if(k == KeyEvent.VK_L&&type==2){
            if(right || left || up || down) {
                if (direction.indexOf(2) == -1){
                    direction.add(2);
                    startWalkingx = x;
                }
            }
            else direction.set(0, 2);
            right = true;
        }
        if(k == KeyEvent.VK_J&&type==2){
            if(right || left || up || down) {
                if (direction.indexOf(4) == -1){
                    direction.add(4);
                    startWalkingx = x;
                }
            }
            else direction.set(0, 4);
            left = true;
        }
        if(k == KeyEvent.VK_I&&type==2){
            if(right || left || up || down) {
                if (direction.indexOf(1) == -1){
                    direction.add(1);
                    startWalkingy = y;
                }
            }
            else direction.set(0, 1);
            up = true;
        }
        if(k == KeyEvent.VK_K&&type==2){
            if(right || left || up || down){
                if(direction.indexOf(3) == -1){
                    direction.add(3);
                    startWalkingy = y;
                }
            }
            else direction.set(0, 3);
            down = true;
        }
        if(k == KeyEvent.VK_U&&type==2&&bombCount>0&&!GameState.grid[y / GameWindow.tileSize + 1][x / GameWindow.tileSize + 1].occupied){
            if(lineBomb>0){
                lineBomb(y/GameWindow.tileSize+1, x/GameWindow.tileSize+1);
                if (direction.get(direction.size()-1)==1)lineBomb(y/GameWindow.tileSize, x/GameWindow.tileSize+1);
                if (direction.get(direction.size()-1)==2)lineBomb(y/GameWindow.tileSize+1, x/GameWindow.tileSize+2);
                if (direction.get(direction.size()-1)==3)lineBomb(y/GameWindow.tileSize, x/GameWindow.tileSize+1);
                if (direction.get(direction.size()-1)==4)lineBomb(y/GameWindow.tileSize+2, x/GameWindow.tileSize+1);
                if (powerBomb>0) powerBomb--;
                lineBomb--;
            }
            else if(powerBomb>0){
                GameState.bombList.add(new Bomb(fuseLength, 15, 2, ((x+25)/70)*70, ((y+25)/70)*70, canPierce));
                powerBomb--;
            }
            else GameState.bombList.add(new Bomb(fuseLength, bombRadius, 2, ((x+25)/70)*70, ((y+25)/70)*70, canPierce));
            bombCount--;

        }
    }

    public void keyReleased(int k){
        if(k == KeyEvent.VK_D&&type==1){
            right = false;
            if(direction.size() > 1) direction.remove(direction.indexOf(2));
        }
        if(k == KeyEvent.VK_A&&type==1){
            left = false;
            if(direction.size() > 1) direction.remove(direction.indexOf(4));
        }
        if(k == KeyEvent.VK_W&&type==1){
            up = false;
            if(direction.size() > 1) direction.remove(direction.indexOf(1));
        }
        if(k == KeyEvent.VK_S&&type==1){
            down = false;
            if(direction.size() > 1) direction.remove(direction.indexOf(3));
        }
        if(k == KeyEvent.VK_L&&type==2){
            right = false;
            if(direction.size() > 1) direction.remove(direction.indexOf(2));
        }
        if(k == KeyEvent.VK_J&&type==2){
            left = false;
            if(direction.size() > 1) direction.remove(direction.indexOf(4));
        }
        if(k == KeyEvent.VK_I&&type==2){
            up = false;
            if(direction.size() > 1) direction.remove(direction.indexOf(1));
        }
        if(k == KeyEvent.VK_K&&type==2){
            down = false;
            if(direction.size() > 1) direction.remove(direction.indexOf(3));
        }
    }   
}
